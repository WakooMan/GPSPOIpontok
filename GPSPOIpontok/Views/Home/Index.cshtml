@model HomeViewModel
@using GPSPOIpontok.Domain;
@{
    ViewData["Title"] = "Home Page";
}

    <h1>Map Viewer</h1>
    <article>
        <h3>Introduction</h3>
    </article>
    <section>
    <aside>
        <h5>Maps</h5>
        <table>
            @{
                int i = 0;
                foreach (Map map in Model.Maps)
                {
                    <tr>
                        <td>
                            @Html.ActionLink(map.Name,"ChooseMap","Home",new { i },new { })
                        </td>
                    </tr>
                    i++;
                }
            }
        </table>
    </aside>
    <article>
        <h4>Map Information</h4>
        <ul>
            <li>Name: @(Model.SelectedMap is not null?Model.SelectedMap.Name:"")</li>
            <li>Direction: @(Model.SelectedMap is not null ? Model.SelectedMap.MapDirection.ToString() : "")</li>
            <li>Ratio: @(Model.SelectedMap is not null ? Model.SelectedMap.MapRatio : "")</li>
            <li>Coordinates: @(Model.SelectedMap is not null ? Model.SelectedMap.MinimumCoordinate  + " - " + Model.SelectedMap.MaximumCoordinate : "")</li>
            <li>
                Image: <br />
                @{
                    if (Model.SelectedMap is not null)
                    {
                        <canvas id="mapcanvas"></canvas>
                    }
                }
            </li>
        </ul>
        @{
            if (Model.SelectedMap is not null)
            {
                @Html.ActionLink("View Map","ViewMap","Map",new { },new { })
            }
        }
    </article>
</section>

@{
    if (Model.SelectedMap is not null)
    {
        <script>
            var canvas = document.getElementById("mapcanvas");
            var ctx = canvas.getContext("2d");
            var image = new Image();
            image.onload = function()
            {
            var oldimgwidth = image.width;
            image.width = window.innerWidth * 0.3;
            image.height = (image.width / oldimgwidth) * image.height;
            ctx.canvas.width = image.width;
            ctx.canvas.height = image.height;
            ctx.drawImage(image, 0, 0, image.width, image.height);
            var minlatitude = @Model.SelectedMap.MinimumCoordinate.Latitude;
            var maxlatitude = @Model.SelectedMap.MaximumCoordinate.Latitude;
            var minlongitude = @Model.SelectedMap.MinimumCoordinate.Longitude;
            var maxlongitude = @Model.SelectedMap.MaximumCoordinate.Longitude;
            var series = [
            @foreach (POI poi in Model.SelectedMap.PointOfInterests)
            {
            @:{ latitude: (@(poi.Coordinate.Latitude)-minlatitude) / (minlatitude - maxlatitude), longitude: (@(poi.Coordinate.Longitude)-minlongitude) / (minlongitude - maxlongitude) },
            }];
            series.forEach(element=>
                {
                    ctx.beginPath();
                    ctx.arc(ctx.canvas.width * element['latitude'], ctx.canvas.height * element['longitude'], 5, 0, 2 * Math.PI, false);
                    ctx.fillStyle = 'red';
                    ctx.fill();
                });
            };
            image.src = "@Url.Content("~/Map.png")";
        </script>
    }
}